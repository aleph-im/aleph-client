[build-system]
build-backend = "hatchling.build"

requires = [ "hatch-vcs", "hatchling" ]

[project]
name = "aleph-client"
description = "Python Client library for the Aleph.im network"
readme = "README.md"
keywords = [ "Aleph.im", "Client", "Library", "Python" ]
license = { file = "LICENSE.txt" }
authors = [
  { name = "Aleph.im Team", email = "hello@aleph.im" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Framework :: aiohttp",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: System :: Distributed Computing",
]

dynamic = [ "version" ]
dependencies = [
  "aiodns==3.2",
  "aiohttp==3.11.13",
  "aleph-message>=1",
  "aleph-sdk-python>=2,<3",
  "base58==2.1.1",               # Needed now as default with _load_account changement
  "py-sr25519-bindings==0.2",    # Needed for DOT signatures
  "pydantic>=2",
  "pygments==2.19.1",
  "pynacl==1.5",                 # Needed now as default with _load_account changement
  "python-magic==0.4.27",
  "rich==13.9.*",
  "setuptools>=65.5",
  "substrate-interface==1.7.11", # Needed for DOT signatures
  "textual==0.73",
  "typer==0.15.2",
]
optional-dependencies.cosmos = [ "cosmospy==6" ]
optional-dependencies.docs = [ "sphinxcontrib-plantuml==0.30" ]
optional-dependencies.ethereum = [ "eth-account>=0.4" ]
optional-dependencies.nuls2 = [ "aleph-nuls2==0.1" ]
optional-dependencies.polkadot = [ "substrate-interface==1.7.11" ]
optional-dependencies.solana = [ "base58==2.1.1", "pynacl==1.5" ]
optional-dependencies.tezos = [ "aleph-pytezos==3.13.4", "pynacl==1.5" ]
urls.Discussions = "https://community.aleph.im/"
urls.Documentation = "https://docs.aleph.im/tools/aleph-client/"
urls.Issues = "https://github.com/aleph-im/aleph-client/issues"
urls.Source = "https://github.com/aleph-im/aleph-client"
scripts.aleph = "aleph_client.__main__:app"
readme-content-type = "text/x-rst; charset=UTF-8"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
include = [
  "src/aleph_client",
]

[tool.hatch.build.targets.wheel]
packages = [ "src/aleph_client" ]

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
platforms = [ "linux", "macos" ]
dependencies = [
  "setuptools>=65.5.0",
  "pytest==8.2.2",
  "pytest-asyncio==0.23.7",
  "pytest-cov==5.0.0",
  "mypy==1.10.0",
  "base58==2.1.1",
  "fastapi==0.100.0",
  "httpx==0.27.0",
  "types-requests==2.32.0.20240602",
  "types-setuptools==70.0.0.20240524",
  "typing_extensions==4.12.2",
  "sphinxcontrib-plantuml==0.30",
]

[tool.hatch.envs.testing]
type = "virtual"
dependencies = [
  "pytest==8.2.2",
  "pytest-asyncio==0.23.7",
  "pytest-cov==5.0.0",
  "mypy==1.10.0",
  "base58==2.1.1",
  "fastapi==0.100.0",
  "httpx==0.27.0",
]
[tool.hatch.envs.testing.scripts]
test = "pytest {args:} ./src/aleph_client/ ./tests/"
test-cov = "pytest --cov {args:} ./src/aleph_client/ ./tests/ --cov-report=xml --cov-report=term ./tests/"
cov-report = [
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = [ "3.9", "3.10", "3.11", "3.12" ]

[tool.hatch.envs.linting]
dependencies = [
  "black==24.4.2",
  "mypy==1.10.0",
  "ruff==0.9.*",
  "isort==5.13.2",
  "yamlfix==1.17.0",
  "pyproject-fmt==2.2.1",

  "types-requests==2.32.0.20240602",
  "types-setuptools==70.0.0.20240524",
  "typing_extensions==4.12.2",
]
[tool.hatch.envs.linting.scripts]
typing = "mypy --config-file=pyproject.toml {args:} ./src/ ./tests/"
style = [
  "ruff check {args:}",
  "black --check --diff {args:} ./src/ ./tests/",
  "isort --check-only --profile black {args:} ./src/ ./tests/",
  "yamlfix --check .",
  "pyproject-fmt --check pyproject.toml",
]
fmt = [
  "black {args:} ./src/ ./tests/",
  "ruff check --fix {args:}",
  "isort --profile black {args:} ./src/ ./tests/",
  "yamlfix .",
  "pyproject-fmt pyproject.toml",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
line-length = 120
target-version = [ "py39" ]

[tool.ruff]
target-version = "py39"
line-length = 120
exclude = [ "docs/", "scripts/gendoc.py" ]

lint.select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
lint.ignore = [
  "A001",
  "A002",
  "ARG001",
  "ARG002",
  # Be compatible with typer
  "B008",
  # Ignore complexity
  "C901",
  # Allow boolean arguments in functions definitions
  "FBT001",
  "FBT002",
  "FBT003",
  # to avoid errors on variables like total_kB
  "N815",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  "PLR2004",
  "RUF012",
  # Allow the use of assert statements
  "S101",
  # Ignore checks for possible passwords
  "S105", # "S106", "S107",
  # ignore false positive
  "S603",
  # don't perform this modification:
  # Union[a, b] -> a | b /Optional[type] -> type | None
  # since python 3.9 doesn't support it
  "UP007",
]
#[tool.ruff.isort]
#known-first-party = ["aleph_client"]
lint.per-file-ignores."src/aleph_client/commands/help_strings.py" = [ "E501" ]
lint.per-file-ignores."tests/unit/*" = [ "T201" ]

lint.per-file-ignores."tests/unit/test_instance.py" = [ "S106", "T201" ]

[tool.pytest.ini_options]
pythonpath = [
  "src",
]
testpaths = [
  "tests",
]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
branch = true
parallel = true
source_pkgs = [ "aleph_client", "tests" ]

[tool.coverage.paths]
aleph_client = [ "src/aleph_client" ]
tests = [ "tests" ]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.9"
install_types = true
non_interactive = true
explicit_package_bases = true
exclude = "conftest.py"
show_column_numbers = true

# Suppressing errors
# Shows errors related to strict None checking, if the global strict_optional flag is enabled
strict_optional = true
no_implicit_optional = true

# Import discovery
# Suppresses error messages about imports that cannot be resolved
ignore_missing_imports = true
# Forces import to reference the original source file
no_implicit_reexport = true
# show error messages from unrelated files
follow_imports = "silent"
follow_imports_for_stubs = false

# Disallow dynamic typing
# Disallows usage of types that come from unfollowed imports
disallow_any_unimported = false
# Disallows all expressions in the module that have type Any
disallow_any_expr = false
# Disallows functions that have Any in their signature after decorator transformation.
disallow_any_decorated = false
# Disallows explicit Any in type positions such as type annotations and generic type parameters.
disallow_any_explicit = false
# Disallows usage of generic types that do not specify explicit type parameters.
disallow_any_generics = false
# Disallows subclassing a value of type Any.
disallow_subclassing_any = false

# Untyped definitions and calls
# Disallows calling functions without type annotations from functions with type annotations.
disallow_untyped_calls = false
# Disallows defining functions without type annotations or with incomplete type annotations
disallow_untyped_defs = false
# Disallows defining functions with incomplete type annotations.
check_untyped_defs = true
# Type-checks the interior of functions without type annotations.
disallow_incomplete_defs = false
# Reports an error whenever a function with type annotations is decorated with a decorator without annotations.
disallow_untyped_decorators = false

# Prohibit comparisons of non-overlapping types (ex: 42 == "no")
strict_equality = true

# Configuring warnings
# Warns about unneeded # type: ignore comments.
warn_unused_ignores = true
# Shows errors for missing return statements on some execution paths.
warn_no_return = true
# Shows a warning when returning a value with type Any from a function declared with a non- Any return type.
warn_return_any = false

[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"

[tool.yamlfix]
sequence_style = "keep_style"
preserve_quotes = true
whitelines = 1
section_whitelines = 2
