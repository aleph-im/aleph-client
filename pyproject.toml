[build-system]
build-backend = "hatchling.build"

requires = [ "hatch-vcs", "hatchling" ]

[project]
name = "aleph-client"
description = "Python Client library for the Aleph.im network"
readme = "README.md"
keywords = [ "Aleph.im", "Client", "Library", "Python" ]
license = { file = "LICENSE.txt" }
authors = [
  { name = "Aleph.im Team", email = "hello@aleph.im" },
]
requires-python = ">=3.6"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Framework :: aiohttp",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.6",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: System :: Distributed Computing",
]

dynamic = [ "version" ]
dependencies = [
  "aiodns==3.2",
  "aiohttp==3.10.6",
  "aleph-message>=0.4.9",
  "aleph-sdk-python>=1.1,<2",
  "base58==2.1.1",            # Needed now as default with _load_account changement
  "pygments==2.18",
  "pynacl==1.5",              # Needed now as default with _load_account changement
  "python-magic==0.4.27",
  "rich==13.8.1",
  "setuptools>=65.5",
  "textual==0.73",
  "typer==0.12.5",
]
optional-dependencies.cosmos = [ "cosmospy==6" ]
optional-dependencies.docs = [ "sphinxcontrib-plantuml==0.27" ]
optional-dependencies.ethereum = [ "eth-account>=0.4" ]
optional-dependencies.nuls2 = [ "nuls2-sdk==0.1" ]
optional-dependencies.polkadot = [ "substrate-interface==1.3.4" ]
optional-dependencies.solana = [ "base58==2.1.1", "pynacl==1.5" ]
optional-dependencies.tezos = [ "aleph-pytezos==3.13.4", "pynacl==1.5" ]
urls.Discussions = "https://community.aleph.im/"
urls.Documentation = "https://docs.aleph.im/tools/aleph-client/"
urls.Issues = "https://github.com/aleph-im/aleph-client/issues"
urls.Source = "https://github.com/aleph-im/aleph-client"
scripts.aleph = "aleph_client.__main__:app"
readme-content-type = "text/x-rst; charset=UTF-8"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
include = [
  "src/aleph_client",
]

[tool.hatch.build.targets.wheel]
packages = [ "src/aleph_client" ]

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
platforms = [ "linux", "macos" ]
dependencies = [
  "setuptools>=65.5.0",
  "pytest==8.2.2",
  "pytest-asyncio==0.23.7",
  "pytest-cov==5.0.0",
  "mypy==1.10.0",
  "base58==2.1.1",
  "fastapi==0.98.0",
  "httpx==0.27.0",
  "types-requests==2.32.0.20240602",
  "types-setuptools==70.0.0.20240524",
  "typing_extensions==4.12.2",
  "sphinxcontrib-plantuml==0.27",
]

[tool.hatch.envs.testing]
type = "virtual"
dependencies = [
  "pytest==8.2.2",
  "pytest-asyncio==0.23.7",
  "pytest-cov==5.0.0",
  "mypy==1.10.0",
  "base58==2.1.1",
  "fastapi==0.98.0",
  "httpx==0.27.0",
]
[tool.hatch.envs.testing.scripts]
test = "pytest {args:} ./src/aleph_client/ ./tests/"
test-cov = "pytest --cov {args:} ./src/aleph_client/ ./tests/ --cov-report=xml --cov-report=term ./tests/"
cov-report = [
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = [ "3.9", "3.10", "3.11", "3.12" ]

[tool.hatch.envs.linting]
dependencies = [
  "black==24.4.2",
  "mypy==1.10.0",
  "ruff==0.4.9",
  "isort==5.13.2",
  "yamlfix==1.16.1",
  "pyproject-fmt==2.2.1",

  "types-requests==2.32.0.20240602",
  "types-setuptools==70.0.0.20240524",
  "typing_extensions==4.12.2",
]
[tool.hatch.envs.linting.scripts]
typing = "mypy {args:} ./src/ ./tests/"
style = [
  # "ruff {args:}",
  "black --check --diff {args:} ./src/ ./tests/",
  "isort --check-only --profile black {args:} ./src/ ./tests/",
  "yamlfix --check .",
  "pyproject-fmt --check pyproject.toml",
]
fmt = [
  "black {args:} ./src/ ./tests/",
  # "ruff --fix {args:}",
  "isort --profile black {args:} ./src/ ./tests/",
  "yamlfix .",
  "pyproject-fmt pyproject.toml",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
line-length = 120
target-version = [ "py39" ]

[tool.ruff]
target-version = "py39"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  #  # Allow non-abstract empty methods in abstract base classes
  #  "B027",
  #  # Allow boolean positional values in function calls, like `dict.get(... True)`
  #  "FBT003",
  #  # Ignore checks for possible passwords
  #  "S105", "S106", "S107",
  #  # Ignore complexity
  #  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Allow the use of assert statements
  "S101",
]

#[tool.ruff.isort]
#known-first-party = ["aleph_client"]

[tool.pytest.ini_options]
pythonpath = [
  "src",
]
testpaths = [
  "tests",
]

[tool.coverage.run]
branch = true
parallel = true
source_pkgs = [ "aleph_client", "tests" ]

[tool.coverage.paths]
aleph_client = [ "src/aleph_client" ]
tests = [ "tests" ]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.9"
install_types = true
non_interactive = true
ignore_missing_imports = true
explicit_package_bases = true
check_untyped_defs = true

[tool.spinx]
source-dir = "docs"
build-dir = "docs/_build"

[tool.yamlfix]
sequence_style = "keep_style"
preserve_quotes = true
whitelines = 1
section_whitelines = 2
